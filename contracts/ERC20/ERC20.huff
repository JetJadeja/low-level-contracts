/* 
Huff ERC20 Implementation
Based off the original example from the Huff codebase
*/


/* Imports */
#include "./contracts/utils/Ownable.huff"

/* Interface */
#define function mint(uint256) view returns ()

#define function transfer(address,uint256) nonpayable returns ()
#define function transferFrom(address,address,uint256) nonpayable returns ()
#define function approve(address,uint256) nonpayable returns ()

#define function balanceOf(address) view returns (uint256)
#define function allowance(address,address) view returns (uint256)
#define function totalSupply() view returns (uint256)

#define event Transfer(address,address,uint256)
#define event Approve(address,address,uint256)

/* Events */
#define constant TRANSFER_EVENT_SIGNATURE = 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF
#define constant APPROVAL_EVENT_SIGNATURE = 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925


/* Storage */
#define constant BALANCE_POINTER = FREE_STORAGE_POINTER()
#define constant TOTAL_SUPPLY_POINTER = FREE_STORAGE_POINTER()
#define constant ALLOWANCE_LOCATION = FREE_STORAGE_POINTER()

/* Constructor */
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    OWNABLE_CONSTRUCTOR()
}

/* Transfer Macros */
#define macro TRANSFER_STACK_INIT() = takes (0) returns (1) {
    caller                           // [from]
    0x24 calldataload                // [amount, from]
    TRANSFER_TAKE_FROM()
}

#define macro TRANSFER_TAKE_FROM() = takes (6) returns (0) {
    // Subtract amount from sender's balance
    // Input stack: [amount, from]
    dup2   // [from, amount, from]
    sload  // [balances[from], amount, from]
    sub    // [balances[from] - amount, from]
    dup2   // [from, balances[from] - amount, from]
    sstore // balances[from] = balances[from] - amount

    // Add amount to recipient's balance
    // Input stack: [amount, 0, 32, signature, to, from]



}



