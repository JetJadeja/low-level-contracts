/* 
Huff ERC20 Implementation
Based off the original example from the Huff codebase
*/

/* Imports */
#include "./contracts/utils/Ownable.huff"
#include "./contracts/utils/Utils.huff"

/* Interface */
#define function mint(uint256) view returns ()

#define function transfer(address,uint256) nonpayable returns ()
#define function transferFrom(address,address,uint256) nonpayable returns ()
#define function approve(address,uint256) nonpayable returns ()

#define function balanceOf(address) view returns (uint256)
#define function allowance(address,address) view returns (uint256)
#define function totalSupply() view returns (uint256)

#define event Transfer(address,address,uint256)
#define event Approve(address,address,uint256)

/* Events */
#define constant TRANSFER_EVENT_SIGNATURE = 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF
#define constant APPROVAL_EVENT_SIGNATURE = 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925


/* Storage */
#define constant BALANCE_POINTER = FREE_STORAGE_POINTER()
#define constant TOTAL_SUPPLY_POINTER = FREE_STORAGE_POINTER()
#define constant ALLOWANCE_LOCATION = FREE_STORAGE_POINTER()

/* Constructor */
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    OWNABLE_CONSTRUCTOR()
}

/* Transfer Macros */
#define macro TRANSFER_TAKE_FROM(error) = takes (2) returns (1) {
    // Get the updated balance of the sender.
    // Input stack: [from, amount]
    caller  // [from, from, amount]
    sload   // [balance, from, amount]
    dup3    // [amount, balance, from, amount]
    dup1    // [amount, amount, balance, from, amount]
    dup3    // [balance, amount, amount, balance, from, amount]
    sub     // [balance - amount, amount, balance, from, amount]

    // Ensure the balance is greater than or equal to the amount.
    swap2   // [balance, amount, balance - amount, from, amount] 
    lt      // [balance < amount, balance - amount, from, amount] 
    <error> jumpi // Jump to the error location if the balance is too low.

    // Set the new balanace
    // Input stack: [balance - amount, from, amount]
    swap1        // [from, balance - amount, amount]
    sstore // Store the new balance in storage
}

#define macro TRANSFER_GIVE_TO() = takes (2) returns (2) {
    // Get the updated balance of the receiver.
    // Input stack: [to, amount]
    dup1    // [to, to, amount]
    sload   // [balance, to, amount]
    dup3    // [amount, balance, to, amount]
    add     // [balance + amount, to, amount]

    // Set the new balanace
    dup2    // [to, balance + amount, to, amount]
    sstore  // Store the new balance in storage
}

// TODO: Must keep values on the stack for the event.
#define macro TRANSFER() = takes (0) returns (0) {
    // Transfer the funds.
    0x24 calldataload                   // [amount]
    caller                              // [from, amount]
    TRANSFER_TAKE_FROM(balance_too_low) // [amount]
    0x04 calldataload ADDRESS_MASK()    // [to, amount]
    TRANSFER_GIVE_TO()                  // [to, amount]

    // Emit the transfer event.
    // Input stack: [to, amount]
    swap1                       // [amount, to]
    0x00                        // [0, amount, to]
    mstore                      // [to] (store the transfered amount in memory, since it is not an indexed event parameter)
    caller                      // [from, to]
    [TRANSFER_EVENT_SIGNATURE]  // [signature, from, to]
    0x00                        // [0, signature, from, to]
    0x20                        // [32, 0, signature, from, to]
    log3                         // Log the transfer event.

    // TODO: do we need to store 1 in memory, since the amount is already stored in memory @ 0:32
    // Return true.
    0x01    // [1]
    0x00    // [0, 1]
    mstore  // Store the value "1" on the stack
    0x20 0x00 return // Return this value.

    // Error locations
    balance_too_low:
        0x00 0x00 revert
}

